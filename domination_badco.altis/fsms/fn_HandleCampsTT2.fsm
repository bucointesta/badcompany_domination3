class FSM
{
  fsmName = "HandleCampsTT2";
  class States
  {
    class Start
    {
      name = "Start";
      init = "params [""_wf"", ""_flag""];" \n
       "private _delay = 3;";
      precondition = "";
      class Links
      {
        class _
        {
          priority = 0.000000;
          to="Loop";
          precondition = "";
          condition="";
          action="";
        };
      };
    };
    class Loop
    {
      name = "Loop";
      init = "private _units = _wf nearEntities [[""CAManBase"", ""Tank"", ""Car""], 12];" \n
       "private _units2 = _wf nearEntities [[""CAManBase"", ""Tank"", ""Car""], 15]; // AI gets a little advantage" \n
       "" \n
       "private _bluforu = blufor countSide _units;" \n
       "private _opforu = opfor countSide _units;" \n
       "private _independentu = independent countSide _units2;";
      precondition = "";
      class Links
      {
        class target_clear
        {
          priority = 10.000000;
          to="End";
          precondition = "";
          condition="d_target_clear";
          action="";
        };
        class _____enemy____0
        {
          priority = 1.000000;
          to="Check";
          precondition = "";
          condition="(_bluforu != 0 || {_opforu != 0 || {_independentu != 0}}) && {_opforu != _bluforu || {_opforu != _independentu || {_bluforu != _independentu}}}";
          action="";
        };
        class _
        {
          priority = 0.000000;
          to="Reset_cap_time";
          precondition = "";
          condition="";
          action="";
        };
      };
    };
    class End
    {
      name = "End";
      init = "";
      precondition = "";
      class Links
      {
      };
    };
    class Reset_cap_time
    {
      name = "Reset_cap_time";
      init = "private _timeend = time + _delay;";
      precondition = "";
      class Links
      {
        class Delay
        {
          priority = 0.000000;
          to="Loop";
          precondition = "";
          condition="time >= _timeend";
          action="";
        };
      };
    };
    class Check
    {
      name = "Check";
      init = "private _captime = _wf getVariable ""D_CAPTIME"";" \n
       "private _curcaptime = _wf getVariable ""D_CURCAPTIME"";" \n
       "private _curside = _wf getVariable ""D_SIDE"";" \n
       "_curcapturer = _wf getVariable ""D_CURCAPTURER"";" \n
       "" \n
       "switch (_curside) do {" \n
       "	case ""GUER"": {" \n
       "		if (_bluforu > 0 && {_independentu == 0 && {_opforu == 0}}) then {" \n
       "			if (_curcapturer != ""WEST"") then {" \n
       "				_wf setVariable [""D_CAPTIME"", 40 + (floor random 10), true];" \n
       "				_curcaptime = 0;" \n
       "				_wf setVariable [""D_CURCAPTURER"",""WEST""];" \n
       "			};" \n
       "			_curcaptime = _curcaptime + (3 max _bluforu);" \n
       "			_wf setVariable [""D_CURCAPTIME"", _curcaptime, true];" \n
       "			if (_wf getVariable ""d_STALL"") then {" \n
       "				_wf setVariable [""d_STALL"", false, true];" \n
       "			};" \n
       "		} else {" \n
       "			if (_opforu > 0 && {_independentu == 0 && {_bluforu == 0}}) then {" \n
       "				if (_curcapturer != ""EAST"") then {" \n
       "					_wf setVariable [""D_CAPTIME"", 40 + (floor random 10), true];" \n
       "					_curcaptime = 0;" \n
       "					_wf setVariable [""D_CURCAPTURER"",""EAST""];" \n
       "				};" \n
       "				_curcaptime = _curcaptime + (3 max _opforu);" \n
       "				_wf setVariable [""D_CURCAPTIME"", _curcaptime, true];" \n
       "				if (_wf getVariable ""d_STALL"") then {" \n
       "					_wf setVariable [""d_STALL"", false, true];" \n
       "				};" \n
       "			} else {" \n
       "				if (_opforu > 0 || {_bluforu > 0 || {_independentu > 0}}) then {" \n
       "					if !(_wf getVariable ""d_STALL"") then {" \n
       "						_wf setVariable [""d_STALL"", true, true];" \n
       "					};" \n
       "				};" \n
       "			};" \n
       "		};" \n
       "	};" \n
       "	case ""WEST"": {" \n
       "		if (_opforu > 0 && {_independentu == 0 && {_bluforu == 0}}) then {" \n
       "			if (_curcapturer != ""EAST"") then {" \n
       "				_wf setVariable [""D_CAPTIME"", 40 + (floor random 10), true];" \n
       "				_curcaptime = 0;" \n
       "				_wf setVariable [""D_CURCAPTURER"", ""EAST""];" \n
       "			};" \n
       "			_curcaptime = _curcaptime + (3 max _opforu);" \n
       "			_wf setVariable [""D_CURCAPTIME"", _curcaptime, true];" \n
       "			if (_wf getVariable ""d_STALL"") then {" \n
       "				_wf setVariable [""d_STALL"", false, true];" \n
       "			};" \n
       "		} else {" \n
       "			if (_independentu > 0 && {_bluforu == 0 && {_opforu == 0}}) then {" \n
       "				if (_curcapturer != ""GUER"") then {" \n
       "					_wf setVariable [""D_CAPTIME"", 15, true];" \n
       "					_curcaptime = 0;" \n
       "					_wf setVariable [""D_CURCAPTURER"",""GUER""];" \n
       "				};" \n
       "				_curcaptime = _curcaptime + (3 max _independentu);" \n
       "				_wf setVariable [""D_CURCAPTIME"", _curcaptime, true];" \n
       "				if (_wf getVariable ""d_STALL"") then {" \n
       "					_wf setVariable [""d_STALL"", false, true];" \n
       "				};" \n
       "			} else {" \n
       "				if (_opforu > 0 || {_bluforu > 0 || {_independentu > 0}}) then {" \n
       "					if !(_wf getVariable ""d_STALL"") then {" \n
       "						_wf setVariable [""d_STALL"", true, true];" \n
       "					};" \n
       "				};" \n
       "			};" \n
       "		};" \n
       "	};" \n
       "	case ""EAST"": {" \n
       "		if (_bluforu > 0 && {_independentu == 0 && {_opforu == 0}}) then {" \n
       "			if (_curcapturer != ""WEST"") then {" \n
       "				_wf setVariable [""D_CAPTIME"", 40 + (floor random 10), true];" \n
       "				_curcaptime = 0;" \n
       "				_wf setVariable [""D_CURCAPTURER"", ""WEST""];" \n
       "			};" \n
       "			_curcaptime = _curcaptime + (3 max _bluforu);" \n
       "			_wf setVariable [""D_CURCAPTIME"", _curcaptime, true];" \n
       "			if (_wf getVariable ""d_STALL"") then {" \n
       "				_wf setVariable [""d_STALL"", false, true];" \n
       "			};" \n
       "		} else {" \n
       "			if (_independentu > 0 && {_bluforu == 0 && {_opforu == 0}}) then {" \n
       "				if (_curcapturer != ""GUER"") then {" \n
       "					_wf setVariable [""D_CAPTIME"", 15, true];" \n
       "					_curcaptime = 0;" \n
       "					_wf setVariable [""D_CURCAPTURER"",""GUER""];" \n
       "				};" \n
       "				_curcaptime = _curcaptime + (3 max _independentu);" \n
       "				_wf setVariable [""D_CURCAPTIME"", _curcaptime, true];" \n
       "				if (_wf getVariable ""d_STALL"") then {" \n
       "					_wf setVariable [""d_STALL"", false, true];" \n
       "				};" \n
       "			} else {" \n
       "				if (_opforu > 0 || {_bluforu > 0 || {_independentu > 0}}) then {" \n
       "					if !(_wf getVariable ""d_STALL"") then {" \n
       "						_wf setVariable [""d_STALL"", true, true];" \n
       "					};" \n
       "				};" \n
       "			};" \n
       "		};" \n
       "	};" \n
       "};" \n
       "" \n
       "private _timeend = time + _delay;";
      precondition = "";
      class Links
      {
        class _curcaptime____
        {
          priority = 1.000000;
          to="Captured";
          precondition = "";
          condition="_curcaptime >= _captime";
          action="";
        };
        class Delay
        {
          priority = 0.000000;
          to="Loop";
          precondition = "";
          condition="time >= _timeend";
          action="";
        };
      };
    };
    class Captured
    {
      name = "Captured";
      init = "_curcapturer = _wf getVariable ""D_CURCAPTURER"";" \n
       "" \n
       "private _mar = format [""d_camp%1"",_wf getVariable ""D_INDEX""];" \n
       "private _texture = """";" \n
       "private _mcolor = """";" \n
       "private _checkside = independent;" \n
       "switch (_curside) do {" \n
       "	case ""GUER"": {" \n
       "		_wf setVariable [""D_SIDE"", _curcapturer, true];" \n
       "		switch (_curcapturer) do {" \n
       "			case ""EAST"": {" \n
       "				_texture = ""\a3\data_f\flags\flag_red_co.paa"";" \n
       "				_mcolor = ""ColorRed"";" \n
       "				d_campscaptured_e = d_campscaptured_e + 1;" \n
       "				publicVariable ""d_campscaptured_e"";" \n
       "				d_points_opfor = d_points_opfor + (d_tt_points select 5);" \n
       "				_checkside = opfor;" \n
       "			};" \n
       "			case ""WEST"": {" \n
       "				_texture = ""\a3\data_f\flags\flag_blue_co.paa"";" \n
       "				_mcolor = ""ColorBlue"";" \n
       "				d_campscaptured_w = d_campscaptured_w + 1;" \n
       "				publicVariable ""d_campscaptured_w"";" \n
       "				d_points_blufor = d_points_blufor + (d_tt_points select 5);" \n
       "				_checkside = blufor;" \n
       "			};" \n
       "		};" \n
       "		[_wf, ""GUER""] execFSM ""fsms\fn_RetakeCamp.fsm"";" \n
       "	};" \n
       "	case ""WEST"": {" \n
       "		_wf setVariable [""D_SIDE"", _curcapturer, true];" \n
       "		switch (_curcapturer) do {" \n
       "			case ""EAST"": {" \n
       "				_texture = ""\a3\data_f\flags\flag_red_co.paa"";" \n
       "				_mcolor = ""ColorRed"";" \n
       "				[_wf, ""GUER""] execFSM ""fsms\fn_RetakeCamp.fsm"";" \n
       "				d_campscaptured_e = d_campscaptured_e + 1;" \n
       "				publicVariable ""d_campscaptured_e"";" \n
       "				d_points_opfor = d_points_opfor + (d_tt_points select 5);" \n
       "				_checkside = opfor;" \n
       "			};" \n
       "			case ""GUER"": {" \n
       "				_texture = ""\a3\data_f\flags\flag_green_co.paa"";" \n
       "				_mcolor = ""ColorBlack"";" \n
       "			};" \n
       "		};" \n
       "		d_campscaptured_w = d_campscaptured_w - 1;" \n
       "		publicVariable ""d_campscaptured_w"";" \n
       "		d_points_blufor = d_points_blufor - (d_tt_points select 6);" \n
       "	};" \n
       "	case ""EAST"": {" \n
       "		_wf setVariable [""D_SIDE"", _curcapturer, true];" \n
       "		switch (_curcapturer) do {" \n
       "			case ""WEST"": {" \n
       "				_texture = ""\a3\data_f\flags\flag_blue_co.paa"";" \n
       "				_mcolor = ""ColorBlue"";" \n
       "				[_wf, ""GUER""] execFSM ""fsms\fn_RetakeCamp.fsm"";" \n
       "				d_campscaptured_w = d_campscaptured_w + 1;" \n
       "				publicVariable ""d_campscaptured_w"";" \n
       "				d_points_blufor = d_points_blufor + (d_tt_points select 5);" \n
       "				_checkside = blufor;" \n
       "			};" \n
       "			case ""GUER"": {" \n
       "				_texture = ""\a3\data_f\flags\flag_green_co.paa"";" \n
       "				_mcolor = ""ColorBlack"";" \n
       "			};" \n
       "		};" \n
       "		d_campscaptured_e = d_campscaptured_e - 1;" \n
       "		publicVariable ""d_campscaptured_e"";" \n
       "		d_points_opfor = d_points_opfor - (d_tt_points select 6);" \n
       "	};" \n
       "};" \n
       "if (!isNull _flag) then {" \n
       "	_flag setFlagTexture _texture;" \n
       "};" \n
       " " \n
       "[_mar, _mcolor] remoteExecCall [""setMarkerColor"", 2];" \n
       "_wf setVariable [""D_CURCAPTIME"", 0, true];" \n
       "" \n
       "_sent = switch (_wf getVariable ""D_SIDE"") do {" \n
       "	case ""WEST"": {""CapCampByBlufor""};" \n
       "	case ""EAST"": {""CapCampByOpfor""};" \n
       "	case ""GUER"": {""CapCampByGuer""};" \n
       "};" \n
       "[45, _sent] remoteExecCall [""d_fnc_DoKBMsg"", 2];" \n
       "" \n
       "if (_checkside != independent) then {" \n
       "	private _objects = _wf nearEntities [[""CAManBase"", ""Tank"", ""Car""], 12];" \n
       "	if (count _objects > 0) then {" \n
       "		{" \n
       "			if (alive _x) then {" \n
       "				if (isNull objectParent _x) then {" \n
       "					if (isPlayer _x && {side (group _x) == _checkside}) then {" \n
       "						[_x, 5] remoteExecCall [""addScore"", 2];" \n
       "					};" \n
       "				} else {" \n
       "					{" \n
       "						if (alive _x && {isPlayer _x && {side (group _x) == _checkside}}) then {" \n
       "							[_x, 5] remoteExecCall [""addScore"", 2];" \n
       "						};" \n
       "						false" \n
       "					} count (crew _x);" \n
       "				};" \n
       "			};" \n
       "			false" \n
       "		} count _objects;" \n
       "	};" \n
       "};" \n
       "" \n
       "private _timeend = time + _delay;";
      precondition = "";
      class Links
      {
        class Delay
        {
          priority = 0.000000;
          to="Loop";
          precondition = "";
          condition="time >= _timeend";
          action="";
        };
      };
    };
  };
  initState="Start";
  finalStates[] =
  {
    "End",
  };
};
